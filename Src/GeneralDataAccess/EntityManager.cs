#region 版权及版本变化申明
/*-----------------------------------------------------------------------------------------------------------
// Copyright (C) 2012 广州优亿信息科技有限公司
// 版权所有
// 
//
// 文件名：用于管理实体，包括持久化、维护实体的状态等。
// 文件功能描述：
//
//
// 创建标识：宋冰（billsoff@gmail.com） 20110406
//
// 修改标识：
// 修改描述：
//
// --------------------------------------------------------------------------------------------------------*/
#endregion 版权及版本变化申明

using System;
using System.Collections.Generic;
using System.Data.Common;

using Microsoft.Practices.EnterpriseLibrary.Data;

namespace Useease.GeneralDataAccess
{
    /// <summary>
    /// 用于管理实体，包括持久化、维护实体的状态等。
    /// </summary>
    public class EntityManager : MarshalByRefObject, IEntityFactory, IDatabaseSession
    {
        #region 私有字段

        private readonly IDatabaseSession m_databaseSession;

        #endregion

        #region 构造函数

        /// <summary>
        /// 构造函数，设置数据库会话引擎对象。
        /// </summary>
        /// <param name="databaseSession">数据库会话引擎对象。</param>
        public EntityManager(IDatabaseSession databaseSession)
        {
            if (databaseSession == null)
            {
                throw new ArgumentNullException("databaseSession", "必须要设置数据库会话引擎对象。");
            }

            m_databaseSession = databaseSession;
        }

        #endregion

        #region 保护的属性

        /// <summary>
        /// 获取数据库会话引擎对象。
        /// </summary>
        protected IDatabaseSession DatabaseSession
        {
            get { return m_databaseSession; }
        }

        #endregion

        #region IEntityFactory 成员

        /// <summary>
        /// 为实体附加对数据库会话的引用，实现是设置为 EntityManager 实例。
        /// </summary>
        /// <param name="entity">实体。</param>
        public void AttachDatabaseSession(Object entity)
        {
            EtyBusinessObject bo = entity as EtyBusinessObject;

            if (bo != null)
            {
                AttachDatabaseSession(bo);
            }
            else
            {
                GroupResult group = entity as GroupResult;

                if (group != null)
                {
                    GroupDefinition definition = GroupDefinitionBuilder.Build(entity.GetType());

                    foreach (GroupPropertyDefinition propertyDef in definition.GetForeignReferenceProperties())
                    {
                        Object value = propertyDef.PropertyInfo.GetValue(entity, null);

                        AttachDatabaseSession(value as EtyBusinessObject);
                    }
                }
            }
        }

        /// <summary>
        /// 为业务实体附加数据库会话对象。
        /// </summary>
        /// <param name="businessObject">业务实体。</param>
        public void AttachDatabaseSession(EtyBusinessObject businessObject)
        {
            if (businessObject != null)
            {
                DbEntityPropertyInfo info = DbEntityPropertyInfoCache.GetProperty(businessObject.GetType());

                info.AttachDatabaseSession(businessObject, this);
            }
        }

        /// <summary>
        /// 为实体集合中的每个实体附加数据库会话对象。
        /// </summary>
        /// <param name="entities">实体集合。</param>
        public void AttachDatabaseSession(IList<Object> entities)
        {
            foreach (Object e in entities)
            {
                AttachDatabaseSession(e);
            }
        }

        /// <summary>
        /// 为业务实体集合中的每个实体附加数据库会话对象。
        /// </summary>
        /// <param name="entities">业务实体集合。</param>
        public void AttachDatabaseSession(IList<EtyBusinessObject> entities)
        {
            foreach (EtyBusinessObject bo in entities)
            {
                AttachDatabaseSession(bo);
            }
        }

        /// <summary>
        /// 创建游离实体对象。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <returns>创建好的游离实体对象。</returns>
        public TEntity CreateNew<TEntity>() where TEntity : EtyBusinessObject, new()
        {
            TEntity entity = new TEntity();

            // TODO: 对于候选主健，也应自动生成值，并查下何时自动赋值（插入时没有值，但用该值获取键值时拿到了值）
            entity.OnCreateNew();
            AttachDatabaseSession(entity);

            return entity;
        }

        /// <summary>
        /// 为实体设置候选键的值。
        /// </summary>
        /// <param name="entity">实体。</param>
        public void SetAutoGeneratedCandidateKeyValue(Object entity)
        {
            if (entity != null)
            {
                SetAutoGeneratedCandidateKeyValue(new Object[] { entity });
            }
        }

        /// <summary>
        /// 为实体集合设置候选键的值，所有的实体必须为同一类型。
        /// </summary>
        /// <param name="entities">实体集合。</param>
        public void SetAutoGeneratedCandidateKeyValues(IList<Object> entities)
        {
            if (entities.Count == 0)
            {
                return;
            }

            Type t = entities[0].GetType();
            EntityDefinition definition = EntityDefinitionBuilder.Build(t);

            definition.NativePrimaryKeyInfo.GenerateCandidateKeyValues(entities);
        }

        /// <summary>
        /// 加载原生主键的值。
        /// </summary>
        /// <param name="entity">实体。</param>
        public void LoadNativePrimaryKeyValue(Object entity)
        {
            if (entity != null)
            {
                LoadNativePrimaryKeyValues(new Object[] { entity });
            }
        }

        /// <summary>
        /// 加载原生主键的值，所有的实体必须为同一类型。
        /// </summary>
        /// <param name="entities"></param>
        public void LoadNativePrimaryKeyValues(IList<Object> entities)
        {
            if (entities.Count == 0)
            {
                return;
            }

            Type t = entities[0].GetType();
            EntityDefinition definition = EntityDefinitionBuilder.Build(t);

            definition.NativePrimaryKeyInfo.LoadPrimaryKeyValues(entities, this);
        }

        #endregion

        #region IDatabaseSession 成员

        #region 动作查询

        #region 非泛型

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entity"></param>
        public virtual void Add(Object entity)
        {
            Object idValue = null;

            DatabaseSession.Add(entity, out idValue);

            if (idValue != null)
            {
                EntityDefinition definition = EntityDefinitionBuilder.Build(entity.GetType());
                definition.NativePrimaryKeyInfo.SetAutoIncrementPrimaryKeyValue(entity, idValue);
            }
            else
            {
                NativePrimaryKeyLoader keyLoader = new NativePrimaryKeyLoader(entity, this);
                keyLoader.Load();
            }

            EtyBusinessObject.SetDbEnttityStatusOnCommitSuccess(entity);
        }

        /// <summary>
        /// 添加实体，并获取标识值。
        /// </summary>
        /// <param name="entity">实体。</param>
        /// <param name="idValue">标识值。</param>
        public void Add(Object entity, out Object idValue)
        {
            DatabaseSession.Add(entity, out idValue);

            if (idValue != null)
            {
                EntityDefinition definition = EntityDefinitionBuilder.Build(entity.GetType());
                definition.NativePrimaryKeyInfo.SetAutoIncrementPrimaryKeyValue(entity, idValue);
            }
            else
            {
                NativePrimaryKeyLoader keyLoader = new NativePrimaryKeyLoader(entity, this);
                keyLoader.Load();
            }

            EtyBusinessObject.SetDbEnttityStatusOnCommitSuccess(entity);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="scope"></param>
        public virtual void CommitTransaction(TransactionScope scope)
        {
            DatabaseSession.CommitTransaction(scope);

            foreach (ActionQueryEntity e in scope.Entities)
            {
                Boolean deleted = (e.ActionQueryType == ActionQueryType.Delete);

                EtyBusinessObject.SetDbEnttityStatusOnCommitSuccess(e.Entity, deleted);
            }
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entity"></param>
        public virtual Boolean Delete(Object entity)
        {
            Boolean success = DatabaseSession.Delete(entity);

            if (success)
            {
                EtyBusinessObject.SetDbEnttityStatusOnCommitSuccess(entity, true);
                DetachDatabaseSession(entity);
            }

            return success;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        public virtual void DeleteAll(Type entityType)
        {
            DatabaseSession.DeleteAll(entityType);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        public virtual void DeleteBatch(Type entityType, Filter filter)
        {
            DatabaseSession.DeleteBatch(entityType, filter);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entity"></param>
        public virtual void Modify(Object entity)
        {
            DatabaseSession.Modify(entity);

            EtyBusinessObject.SetDbEnttityStatusOnCommitSuccess(entity);
        }

        #region 批量修改

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entities"></param>
        public virtual Int32 ModifyBatch(IList<IDbEntity> entities)
        {
            SetAutoGeneratedCandidateKeyValues4ModificationBatch(entities);

            Int32 rowsAffected = DatabaseSession.ModifyBatch(entities);

            EtyBusinessObject.SetDbEntitiesStatusOnCommitSuccess(entities);
            DetachDatabaseSession(entities);

            return rowsAffected;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entities"></param>
        /// <param name="connection"></param>
        public virtual Int32 ModifyBatch(IList<IDbEntity> entities, DbConnection connection)
        {
            SetAutoGeneratedCandidateKeyValues4ModificationBatch(entities);

            Int32 rowsAffected = DatabaseSession.ModifyBatch(entities, connection);

            EtyBusinessObject.SetDbEntitiesStatusOnCommitSuccess(entities);
            DetachDatabaseSession(entities);

            return rowsAffected;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entities"></param>
        public virtual Int32 ModifyBatchStandard(IList<IDbEntity> entities)
        {
            SetAutoGeneratedCandidateKeyValues4ModificationBatch(entities);

            Int32 rowsAffected = DatabaseSession.ModifyBatchStandard(entities);

            EtyBusinessObject.SetDbEntitiesStatusOnCommitSuccess(entities);
            DetachDatabaseSession(entities);

            return rowsAffected;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entities"></param>
        /// <param name="connection"></param>
        public virtual Int32 ModifyBatchStandard(IList<IDbEntity> entities, DbConnection connection)
        {
            SetAutoGeneratedCandidateKeyValues4ModificationBatch(entities);

            Int32 rowsAffected = DatabaseSession.ModifyBatchStandard(entities, connection);

            EtyBusinessObject.SetDbEntitiesStatusOnCommitSuccess(entities);
            DetachDatabaseSession(entities);

            return rowsAffected;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entities"></param>
        public virtual Int32 ModifyBatchTransactional(IList<IDbEntity> entities)
        {
            SetAutoGeneratedCandidateKeyValues4ModificationBatch(entities);

            Int32 rowsAffected = DatabaseSession.ModifyBatchTransactional(entities);

            EtyBusinessObject.SetDbEntitiesStatusOnCommitSuccess(entities);
            DetachDatabaseSession(entities);

            return rowsAffected;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entities"></param>
        /// <param name="connection"></param>
        public virtual Int32 ModifyBatchTransactional(IList<IDbEntity> entities, DbConnection connection)
        {
            SetAutoGeneratedCandidateKeyValues4ModificationBatch(entities);

            Int32 rowsAffected = DatabaseSession.ModifyBatchTransactional(entities, connection);

            EtyBusinessObject.SetDbEntitiesStatusOnCommitSuccess(entities);
            DetachDatabaseSession(entities);

            return rowsAffected;
        }

        #region 批量更新辅助方法

        /// <summary>
        /// 为批量更新中的新增项设置候选键的值。
        /// </summary>
        /// <param name="entities">批量更新实体集合。</param>
        private void SetAutoGeneratedCandidateKeyValues4ModificationBatch(IList<IDbEntity> entities)
        {
            List<Object> newEntities = new List<Object>();

            foreach (IDbEntity e in entities)
            {
                if (e.Transient)
                {
                    newEntities.Add(e);
                }
            }

            SetAutoGeneratedCandidateKeyValues(newEntities);
        }

        #endregion

        #endregion

        #region 执行存储过程

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="storedProcedureName"></param>
        public virtual StoredProcedureExecutionResult<Object> ExecuteStoredProcedure(String storedProcedureName)
        {
            return DatabaseSession.ExecuteStoredProcedure(storedProcedureName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="storedProcedureParameters"></param>
        public virtual StoredProcedureExecutionResult<Object> ExecuteStoredProcedure(DbStoredProcedureParameters storedProcedureParameters)
        {
            return DatabaseSession.ExecuteStoredProcedure(storedProcedureParameters);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="storedProcedureName"></param>
        /// <param name="storedProcedureParameters"></param>
        public virtual StoredProcedureExecutionResult<Object> ExecuteStoredProcedure(String storedProcedureName, DbStoredProcedureParameters storedProcedureParameters)
        {
            return DatabaseSession.ExecuteStoredProcedure(storedProcedureName, storedProcedureParameters);
        }

        #endregion

        #endregion

        #region 泛型

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        public virtual void DeleteAll<TEntity>() where TEntity : class
        {
            DatabaseSession.DeleteAll<TEntity>();
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="filter"></param>
        public virtual void DeleteBatch<TEntity>(Filter filter) where TEntity : class
        {
            DatabaseSession.DeleteBatch<TEntity>(filter);
        }

        #endregion

        #endregion

        #region 加载数据

        #region Load

        #region 非泛型

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        public virtual Object[] Load(Type entityType)
        {
            Object[] results = DatabaseSession.Load(entityType);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        public virtual Object[] Load(Type entityType, Filter filter)
        {
            Object[] results = DatabaseSession.Load(entityType, filter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="sorter"></param>
        public virtual Object[] Load(Type entityType, Sorter sorter)
        {
            Object[] results = DatabaseSession.Load(entityType, sorter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="sorter"></param>
        public virtual Object[] Load(Type entityType, Filter filter, Sorter sorter)
        {
            Object[] results = DatabaseSession.Load(entityType, filter, sorter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="sorter"></param>
        /// <param name="startIndex"></param>
        /// <param name="recordCount"></param>
        /// <returns></returns>
        public virtual Object[] Load(Type entityType, Filter filter, Sorter sorter, Int32 startIndex, Int32 recordCount)
        {
            Object[] results = DatabaseSession.Load(entityType, filter, sorter, startIndex, recordCount);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <returns>全部实体集合。</returns>
        public virtual Object[] Load(Type entityType, CompositeBuilderStrategy loadStrategy)
        {
            Object[] results = DatabaseSession.Load(entityType, loadStrategy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <returns>符合过滤条件的实体集合。</returns>
        public virtual Object[] Load(Type entityType, CompositeBuilderStrategy loadStrategy, Filter filter)
        {
            Object[] results = DatabaseSession.Load(entityType, loadStrategy, filter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, CompositeBuilderStrategy loadStrategy, Sorter sorter)
        {
            Object[] results = DatabaseSession.Load(entityType, loadStrategy, sorter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter)
        {
            Object[] results = DatabaseSession.Load(entityType, loadStrategy, filter, sorter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空，如果 startIndex 小于零或 recordCount 小于 1，则取全部符合过过滤条件的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="startIndex">开始索引。</param>
        /// <param name="recordCount">要获取的记录数。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter, Int32 startIndex, Int32 recordCount)
        {
            Object[] results = DatabaseSession.Load(entityType, loadStrategy, filter, sorter, startIndex, recordCount);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, AssemblyPolicy childrenPolicy)
        {
            Object[] results = DatabaseSession.Load(entityType, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, Filter filter, AssemblyPolicy childrenPolicy)
        {
            Object[] results = DatabaseSession.Load(entityType, filter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, Sorter sorter, AssemblyPolicy childrenPolicy)
        {
            Object[] results = DatabaseSession.Load(entityType, sorter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, Filter filter, Sorter sorter, AssemblyPolicy childrenPolicy)
        {
            Object[] results = DatabaseSession.Load(entityType, filter, sorter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, CompositeBuilderStrategy loadStrategy, AssemblyPolicy childrenPolicy)
        {
            Object[] results = DatabaseSession.Load(entityType, loadStrategy, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, CompositeBuilderStrategy loadStrategy, Filter filter, AssemblyPolicy childrenPolicy)
        {
            Object[] results = DatabaseSession.Load(entityType, loadStrategy, filter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, CompositeBuilderStrategy loadStrategy, Sorter sorter, AssemblyPolicy childrenPolicy)
        {
            Object[] results = DatabaseSession.Load(entityType, loadStrategy, sorter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter, AssemblyPolicy childrenPolicy)
        {
            Object[] results = DatabaseSession.Load(entityType, loadStrategy, filter, sorter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空，如果 startIndex 小于零或 recordCount 小于 1，则取全部符合过过滤条件的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <param name="startIndex">开始索引。</param>
        /// <param name="recordCount">要获取的记录数。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual Object[] Load(Type entityType, CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter, AssemblyPolicy childrenPolicy, Int32 startIndex, Int32 recordCount)
        {
            Object[] results = DatabaseSession.Load(entityType, loadStrategy, filter, sorter, childrenPolicy, startIndex, recordCount);

            AttachDatabaseSession(results);

            return results;
        }

        #region 执行存储过程

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="storedProcedureParameters"></param>
        /// <returns></returns>
        public virtual StoredProcedureExecutionResult<Object> Load(Type entityType, DbStoredProcedureParameters storedProcedureParameters)
        {
            StoredProcedureExecutionResult<Object> executionResult = DatabaseSession.Load(entityType, storedProcedureParameters);

            return executionResult;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="storedProcedureParameters"></param>
        /// <param name="startIndex"></param>
        /// <param name="recordCount"></param>
        /// <returns></returns>
        public virtual StoredProcedureExecutionResult<Object> Load(Type entityType, DbStoredProcedureParameters storedProcedureParameters, Int32 startIndex, Int32 recordCount)
        {
            StoredProcedureExecutionResult<Object> executionResult = DatabaseSession.Load(entityType, storedProcedureParameters, startIndex, recordCount);

            return executionResult;
        }

        #endregion

        #endregion

        #region 泛型

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <returns></returns>
        public virtual TEntity[] Load<TEntity>() where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>();

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="filter"></param>
        /// <returns></returns>
        public virtual TEntity[] Load<TEntity>(Filter filter) where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(filter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="sorter"></param>
        /// <returns></returns>
        public virtual TEntity[] Load<TEntity>(Sorter sorter) where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(sorter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="filter"></param>
        /// <param name="sorter"></param>
        /// <returns></returns>
        public virtual TEntity[] Load<TEntity>(Filter filter, Sorter sorter) where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(filter, sorter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="filter"></param>
        /// <param name="sorter"></param>
        /// <param name="startIndex"></param>
        /// <param name="recordCount"></param>
        /// <returns></returns>
        public virtual TEntity[] Load<TEntity>(Filter filter, Sorter sorter, Int32 startIndex, Int32 recordCount) where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(filter, sorter, startIndex, recordCount);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <returns>全部实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(CompositeBuilderStrategy loadStrategy) where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(loadStrategy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <returns>符合过滤条件的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(CompositeBuilderStrategy loadStrategy, Filter filter) where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(loadStrategy, filter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(CompositeBuilderStrategy loadStrategy, Sorter sorter) where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(loadStrategy, sorter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter) where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(loadStrategy, filter, sorter);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空，如果 startIndex 小于零或 recordCount 小于 1，则取全部符合过过滤条件的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="startIndex">开始索引。</param>
        /// <param name="recordCount">要获取的记录数。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter, Int32 startIndex, Int32 recordCount)
            where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(loadStrategy, filter, sorter, startIndex, recordCount);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(AssemblyPolicy childrenPolicy)
            where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="filter">过滤器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(Filter filter, AssemblyPolicy childrenPolicy)
            where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(filter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(Sorter sorter, AssemblyPolicy childrenPolicy)
            where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(sorter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(Filter filter, Sorter sorter, AssemblyPolicy childrenPolicy)
            where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(filter, sorter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(CompositeBuilderStrategy loadStrategy, AssemblyPolicy childrenPolicy)
            where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(loadStrategy, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(CompositeBuilderStrategy loadStrategy, Filter filter, AssemblyPolicy childrenPolicy)
            where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(loadStrategy, filter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(CompositeBuilderStrategy loadStrategy, Sorter sorter, AssemblyPolicy childrenPolicy)
            where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(loadStrategy, sorter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter, AssemblyPolicy childrenPolicy)
            where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(loadStrategy, filter, sorter, childrenPolicy);

            AttachDatabaseSession(results);

            return results;
        }

        /// <summary>
        /// 从数据库中加载指定类型的实体，过滤器和排序器皆可以为空，如果 startIndex 小于零或 recordCount 小于 1，则取全部符合过过滤条件的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="startIndex">开始索引。</param>
        /// <param name="recordCount">要获取的记录数。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的实体集合。</returns>
        public virtual TEntity[] Load<TEntity>(CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter, AssemblyPolicy childrenPolicy, Int32 startIndex, Int32 recordCount)
            where TEntity : class, new()
        {
            TEntity[] results = DatabaseSession.Load<TEntity>(loadStrategy, filter, sorter, childrenPolicy, startIndex, recordCount);

            AttachDatabaseSession(results);

            return results;
        }

        #region 执行存储过程

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="storedProcedureParameters"></param>
        /// <returns></returns>
        public virtual StoredProcedureExecutionResult<TEntity> Load<TEntity>(DbStoredProcedureParameters storedProcedureParameters) where TEntity : class, new()
        {
            StoredProcedureExecutionResult<TEntity> executionResult = DatabaseSession.Load<TEntity>(storedProcedureParameters);

            return executionResult;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="storedProcedureParameters"></param>
        /// <param name="startIndex"></param>
        /// <param name="recordCount"></param>
        /// <returns></returns>
        public virtual StoredProcedureExecutionResult<TEntity> Load<TEntity>(DbStoredProcedureParameters storedProcedureParameters, Int32 startIndex, Int32 recordCount) where TEntity : class, new()
        {
            StoredProcedureExecutionResult<TEntity> executionResult = DatabaseSession.Load<TEntity>(storedProcedureParameters, startIndex, recordCount);

            return executionResult;
        }

        #endregion

        #endregion

        #endregion

        #region LoadFirst

        #region 非泛型

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <returns></returns>
        public virtual Object LoadFirst(Type entityType)
        {
            Object result = DatabaseSession.LoadFirst(entityType);

            EtyBusinessObject bo = result as EtyBusinessObject;

            if (bo != null)
            {
                AttachDatabaseSession(bo);
            }

            return result;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <returns></returns>
        public virtual Object LoadFirst(Type entityType, Filter filter)
        {
            Object result = DatabaseSession.LoadFirst(entityType, filter);

            EtyBusinessObject bo = result as EtyBusinessObject;

            if (bo != null)
            {
                AttachDatabaseSession(bo);
            }

            return result;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="sorter"></param>
        /// <returns></returns>
        public virtual Object LoadFirst(Type entityType, Sorter sorter)
        {
            Object result = DatabaseSession.LoadFirst(entityType, sorter);

            EtyBusinessObject bo = result as EtyBusinessObject;

            if (bo != null)
            {
                AttachDatabaseSession(bo);
            }

            return result;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="sorter"></param>
        /// <returns></returns>
        public virtual Object LoadFirst(Type entityType, Filter filter, Sorter sorter)
        {
            Object result = DatabaseSession.LoadFirst(entityType, filter, sorter);

            EtyBusinessObject bo = result as EtyBusinessObject;

            if (bo != null)
            {
                AttachDatabaseSession(bo);
            }

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <returns>第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, CompositeBuilderStrategy loadStrategy)
        {
            Object result = DatabaseSession.LoadFirst(entityType, loadStrategy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体，过滤器可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, CompositeBuilderStrategy loadStrategy, Filter filter)
        {
            Object result = DatabaseSession.LoadFirst(entityType, loadStrategy, filter);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, CompositeBuilderStrategy loadStrategy, Sorter sorter)
        {
            Object result = DatabaseSession.LoadFirst(entityType, loadStrategy, sorter);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter)
        {
            Object result = DatabaseSession.LoadFirst(entityType, loadStrategy, filter, sorter);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, AssemblyPolicy childrenPolicy)
        {
            Object result = DatabaseSession.LoadFirst(entityType, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, Filter filter, AssemblyPolicy childrenPolicy)
        {
            Object result = DatabaseSession.LoadFirst(entityType, filter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, Sorter sorter, AssemblyPolicy childrenPolicy)
        {
            Object result = DatabaseSession.LoadFirst(entityType, sorter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, Filter filter, Sorter sorter, AssemblyPolicy childrenPolicy)
        {
            Object result = DatabaseSession.LoadFirst(entityType, filter, sorter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, CompositeBuilderStrategy loadStrategy, AssemblyPolicy childrenPolicy)
        {
            Object result = DatabaseSession.LoadFirst(entityType, loadStrategy, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, CompositeBuilderStrategy loadStrategy, Filter filter, AssemblyPolicy childrenPolicy)
        {
            Object result = DatabaseSession.LoadFirst(entityType, loadStrategy, filter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, CompositeBuilderStrategy loadStrategy, Sorter sorter, AssemblyPolicy childrenPolicy)
        {
            Object result = DatabaseSession.LoadFirst(entityType, loadStrategy, sorter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual Object LoadFirst(Type entityType, CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter, AssemblyPolicy childrenPolicy)
        {
            Object result = DatabaseSession.LoadFirst(entityType, loadStrategy, filter, sorter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        #region 执行存储过程

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="storedProcedureParameters"></param>
        /// <returns></returns>
        public virtual StoredProcedureExecutionResult<Object> LoadFirst(Type entityType, DbStoredProcedureParameters storedProcedureParameters)
        {
            StoredProcedureExecutionResult<Object> executionResult = DatabaseSession.LoadFirst(entityType, storedProcedureParameters);

            return executionResult;
        }

        #endregion

        #endregion

        #region 泛型

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <returns></returns>
        public virtual TEntity LoadFirst<TEntity>() where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>();

            EtyBusinessObject bo = result as EtyBusinessObject;

            if (bo != null)
            {
                AttachDatabaseSession(bo);
            }

            return result;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="filter"></param>
        /// <returns></returns>
        public virtual TEntity LoadFirst<TEntity>(Filter filter) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(filter);

            EtyBusinessObject bo = result as EtyBusinessObject;

            if (bo != null)
            {
                AttachDatabaseSession(bo);
            }

            return result;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="sorter"></param>
        /// <returns></returns>
        public virtual TEntity LoadFirst<TEntity>(Sorter sorter) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(sorter);

            EtyBusinessObject bo = result as EtyBusinessObject;

            if (bo != null)
            {
                AttachDatabaseSession(bo);
            }

            return result;
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="filter"></param>
        /// <param name="sorter"></param>
        /// <returns></returns>
        public virtual TEntity LoadFirst<TEntity>(Filter filter, Sorter sorter) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(filter, sorter);

            EtyBusinessObject bo = result as EtyBusinessObject;

            if (bo != null)
            {
                AttachDatabaseSession(bo);
            }

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <returns>第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(CompositeBuilderStrategy loadStrategy) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(loadStrategy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体，过滤器可以为空。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(CompositeBuilderStrategy loadStrategy, Filter filter) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(loadStrategy, filter);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(CompositeBuilderStrategy loadStrategy, Sorter sorter) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(loadStrategy, sorter);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(loadStrategy, filter, sorter);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(AssemblyPolicy childrenPolicy) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="filter">过滤器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(Filter filter, AssemblyPolicy childrenPolicy) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(filter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(Sorter sorter, AssemblyPolicy childrenPolicy) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(sorter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(Filter filter, Sorter sorter, AssemblyPolicy childrenPolicy) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(filter, sorter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(CompositeBuilderStrategy loadStrategy, AssemblyPolicy childrenPolicy) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(loadStrategy, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(CompositeBuilderStrategy loadStrategy, Filter filter, AssemblyPolicy childrenPolicy) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(loadStrategy, filter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(CompositeBuilderStrategy loadStrategy, Sorter sorter, AssemblyPolicy childrenPolicy) where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(loadStrategy, sorter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        /// <summary>
        /// 从数据库中加载第一个指定类型的实体，过滤器和排序器皆可以为空。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="filter">过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="childrenPolicy">子实体装配方针。</param>
        /// <returns>符合过滤条件并按排序器指定的排序列进行排序后的第一个实体。</returns>
        public virtual TEntity LoadFirst<TEntity>(CompositeBuilderStrategy loadStrategy, Filter filter, Sorter sorter, AssemblyPolicy childrenPolicy)
            where TEntity : class, new()
        {
            TEntity result = DatabaseSession.LoadFirst<TEntity>(loadStrategy, filter, sorter, childrenPolicy);

            AttachDatabaseSession(result);

            return result;
        }

        #region 执行存储过程

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="storedProcedureParameters"></param>
        /// <returns></returns>
        public virtual StoredProcedureExecutionResult<TEntity> LoadFirst<TEntity>(DbStoredProcedureParameters storedProcedureParameters) where TEntity : class, new()
        {
            StoredProcedureExecutionResult<TEntity> executionResult = DatabaseSession.LoadFirst<TEntity>(storedProcedureParameters);

            return executionResult;
        }

        #endregion

        #endregion

        #endregion

        #region 聚合操作

        #region 分组查询

        /// <summary>
        /// 分组查询。
        /// </summary>
        /// <typeparam name="TGroupResult">分组结果实体类型。</typeparam>
        /// <returns>查询结果集合。</returns>
        public virtual TGroupResult[] Aggregate<TGroupResult>()
            where TGroupResult : GroupResult, new()
        {
            return DatabaseSession.Aggregate<TGroupResult>();
        }

        /// <summary>
        /// 分组查询。
        /// </summary>
        /// <typeparam name="TGroupResult">分组结果实体类型。</typeparam>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="havingFilter">HAVING 过滤器。</param>
        /// <returns>查询结果集合。</returns>
        public virtual TGroupResult[] Aggregate<TGroupResult>(Filter whereFilter, Filter havingFilter)
            where TGroupResult : GroupResult, new()
        {
            return DatabaseSession.Aggregate<TGroupResult>(whereFilter, havingFilter);
        }

        /// <summary>
        /// 分组查询。
        /// </summary>
        /// <typeparam name="TGroupResult">分组结果实体类型。</typeparam>
        /// <param name="sorter">排序器。</param>
        /// <returns>查询结果集合。</returns>
        public virtual TGroupResult[] Aggregate<TGroupResult>(Sorter sorter)
            where TGroupResult : GroupResult, new()
        {
            return DatabaseSession.Aggregate<TGroupResult>(sorter);
        }

        /// <summary>
        /// 分组查询。
        /// </summary>
        /// <typeparam name="TGroupResult">分组结果实体类型。</typeparam>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="havingFilter">HAVING 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>查询结果集合。</returns>
        public virtual TGroupResult[] Aggregate<TGroupResult>(Filter whereFilter, Filter havingFilter, Sorter sorter)
            where TGroupResult : GroupResult, new()
        {
            return DatabaseSession.Aggregate<TGroupResult>(whereFilter, havingFilter, sorter);
        }

        /// <summary>
        /// 分组查询。
        /// </summary>
        /// <typeparam name="TGroupResult">分组结果实体类型。</typeparam>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="havingFilter">HAVING 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="startIndex">开始索引。</param>
        /// <param name="recordCount">记录数。</param>
        /// <returns>查询结果集合。</returns>
        public virtual TGroupResult[] Aggregate<TGroupResult>(Filter whereFilter, Filter havingFilter, Sorter sorter, Int32 startIndex, Int32 recordCount)
            where TGroupResult : GroupResult, new()
        {
            return DatabaseSession.Aggregate<TGroupResult>(whereFilter, havingFilter, sorter, startIndex, recordCount);
        }

        /// <summary>
        /// 分组查询，获取一个结果。
        /// </summary>
        /// <typeparam name="TGroupResult">分组结果实体类型。</typeparam>
        /// <returns>查询结果。</returns>
        public virtual TGroupResult AggregateOne<TGroupResult>()
            where TGroupResult : GroupResult, new()
        {
            return DatabaseSession.AggregateOne<TGroupResult>();
        }

        /// <summary>
        /// 分组查询，获取一个结果。
        /// </summary>
        /// <typeparam name="TGroupResult">分组结果实体类型。</typeparam>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="havingFilter">HAVING 过滤器。</param>
        /// <returns>查询结果。</returns>
        public virtual TGroupResult AggregateOne<TGroupResult>(Filter whereFilter, Filter havingFilter)
            where TGroupResult : GroupResult, new()
        {
            return DatabaseSession.AggregateOne<TGroupResult>(whereFilter, havingFilter);
        }

        /// <summary>
        /// 分组查询，获取一个结果。
        /// </summary>
        /// <typeparam name="TGroupResult">分组结果实体类型。</typeparam>
        /// <param name="sorter">排序器。</param>
        /// <returns>查询结果。</returns>
        public virtual TGroupResult AggregateOne<TGroupResult>(Sorter sorter)
            where TGroupResult : GroupResult, new()
        {
            return DatabaseSession.AggregateOne<TGroupResult>(sorter);
        }

        /// <summary>
        /// 分组查询，获取一个结果。
        /// </summary>
        /// <typeparam name="TGroupResult">分组结果实体类型。</typeparam>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="havingFilter">HAVING 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>查询结果。</returns>
        public virtual TGroupResult AggregateOne<TGroupResult>(Filter whereFilter, Filter havingFilter, Sorter sorter)
            where TGroupResult : GroupResult, new()
        {
            return DatabaseSession.AggregateOne<TGroupResult>(whereFilter, havingFilter, sorter);
        }

        /// <summary>
        /// 分组查询。
        /// </summary>
        /// <param name="groupResultType">分组结果实体类型。</param>
        /// <returns>查询结果集合。</returns>
        public virtual GroupResult[] Aggregate(Type groupResultType)
        {
            return DatabaseSession.Aggregate(groupResultType);
        }

        /// <summary>
        /// 分组查询。
        /// </summary>
        /// <param name="groupResultType">分组结果实体类型。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="havingFilter">HAVING 过滤器。</param>
        /// <returns>查询结果集合。</returns>
        public virtual GroupResult[] Aggregate(Type groupResultType, Filter whereFilter, Filter havingFilter)
        {
            return DatabaseSession.Aggregate(groupResultType, whereFilter, havingFilter);
        }

        /// <summary>
        /// 分组查询。
        /// </summary>
        /// <param name="groupResultType">分组结果实体类型。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>查询结果集合。</returns>
        public virtual GroupResult[] Aggregate(Type groupResultType, Sorter sorter)
        {
            return DatabaseSession.Aggregate(groupResultType, sorter);
        }

        /// <summary>
        /// 分组查询。
        /// </summary>
        /// <param name="groupResultType">分组结果实体类型。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="havingFilter">HAVING 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>查询结果集合。</returns>
        public virtual GroupResult[] Aggregate(Type groupResultType, Filter whereFilter, Filter havingFilter, Sorter sorter)
        {
            return DatabaseSession.Aggregate(groupResultType, whereFilter, havingFilter, sorter);
        }

        /// <summary>
        /// 分组查询。
        /// </summary>
        /// <param name="groupResultType">分组结果实体类型。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="havingFilter">HAVING 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="startIndex">开始索引。</param>
        /// <param name="recordCount">记录数。</param>
        /// <returns>查询结果集合。</returns>
        public virtual GroupResult[] Aggregate(Type groupResultType, Filter whereFilter, Filter havingFilter, Sorter sorter, Int32 startIndex, Int32 recordCount)
        {
            return DatabaseSession.Aggregate(groupResultType, whereFilter, havingFilter, sorter, startIndex, recordCount);
        }

        /// <summary>
        /// 分组查询，获取一个结果。
        /// </summary>
        /// <returns>查询结果。</returns>
        public virtual GroupResult AggregateOne(Type groupResultType)
        {
            return DatabaseSession.AggregateOne(groupResultType);
        }

        /// <summary>
        /// 分组查询，获取一个结果。
        /// </summary>
        /// <param name="groupResultType">分组结果实体类型。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="havingFilter">HAVING 过滤器。</param>
        /// <returns>查询结果。</returns>
        public virtual GroupResult AggregateOne(Type groupResultType, Filter whereFilter, Filter havingFilter)
        {
            return DatabaseSession.AggregateOne(groupResultType, whereFilter, havingFilter);
        }

        /// <summary>
        /// 分组查询，获取一个结果。
        /// </summary>
        /// <param name="groupResultType">分组结果实体类型。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>查询结果。</returns>
        public virtual GroupResult AggregateOne(Type groupResultType, Sorter sorter)
        {
            return DatabaseSession.AggregateOne(groupResultType, sorter);
        }

        /// <summary>
        /// 分组查询，获取一个结果。
        /// </summary>
        /// <param name="groupResultType">分组结果实体类型。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="havingFilter">HAVING 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>查询结果。</returns>
        public virtual GroupResult AggregateOne(Type groupResultType, Filter whereFilter, Filter havingFilter, Sorter sorter)
        {
            return DatabaseSession.AggregateOne(groupResultType, whereFilter, havingFilter, sorter);
        }

        #endregion

        #region AVG

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Avg(Type entityType, String propertyName)
        {
            return DatabaseSession.Avg(entityType, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Avg(Type entityType, String entityPropertyName, String propertyName)
        {
            return DatabaseSession.Avg(entityType, entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Avg(Type entityType, Filter filter, String propertyName)
        {
            return DatabaseSession.Avg(entityType, filter, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Avg(Type entityType, Filter filter, String entityPropertyName, String propertyName)
        {
            return DatabaseSession.Avg(entityType, filter, entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Avg<TEntity, TResult>(String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Avg<TEntity, TResult>(propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Avg<TEntity, TResult>(String entityPropertyName, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Avg<TEntity, TResult>(entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="filter"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Avg<TEntity, TResult>(Filter filter, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Avg<TEntity, TResult>(filter, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="filter"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Avg<TEntity, TResult>(Filter filter, String entityPropertyName, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Avg<TEntity, TResult>(filter, entityPropertyName, propertyName);
        }

        #endregion

        #region COUNT

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <returns></returns>
        public virtual Int32 Count(Type entityType)
        {
            return DatabaseSession.Count(entityType);
        }

        /// <summary>
        /// 计算与指定的属性相映射的列的数量。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="propertyName">值属性名称。</param>
        /// <returns>计算结果。</returns>
        public virtual Int32 Count(Type entityType, String propertyName)
        {
            return Count(entityType, propertyName);
        }

        /// <summary>
        /// 计算与指定的属性相映射的列的数量。
        /// </summary>
        /// <param name="entityType">实体类型。</param>
        /// <param name="entityPropertyName">实体属性名称。</param>
        /// <param name="propertyName">值属性名称。</param>
        /// <returns>计算结果。</returns>
        public virtual Int32 Count(Type entityType, String entityPropertyName, String propertyName)
        {
            return Count(entityType, entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <returns></returns>
        public virtual Int32 Count(Type entityType, Filter filter)
        {
            return DatabaseSession.Count(entityType, filter);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Int32 Count(Type entityType, Filter filter, String propertyName)
        {
            return DatabaseSession.Count(entityType, filter, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Int32 Count(Type entityType, Filter filter, String entityPropertyName, String propertyName)
        {
            return DatabaseSession.Count(entityType, filter, entityPropertyName, propertyName);
        }

        /// <summary>
        /// 计算记录的数量。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <returns>计算结果。</returns>
        public virtual Int32 Count<TEntity>() where TEntity : class, new()
        {
            return DatabaseSession.Count<TEntity>();
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Int32 Count<TEntity>(String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Count<TEntity>(propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Int32 Count<TEntity>(String entityPropertyName, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Count<TEntity>(entityPropertyName, propertyName);
        }

        /// <summary>
        /// 计算过滤后的记录的的数量。
        /// </summary>
        /// <typeparam name="TEntity">实体类型。</typeparam>
        /// <param name="filter">过滤器。</param>
        /// <returns>计算结果。</returns>
        public virtual Int32 Count<TEntity>(Filter filter) where TEntity : class, new()
        {
            return DatabaseSession.Count<TEntity>(filter);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="filter"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Int32 Count<TEntity>(Filter filter, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Count<TEntity>(filter, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="filter"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Int32 Count<TEntity>(Filter filter, String entityPropertyName, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Count<TEntity>(filter, entityPropertyName, propertyName);
        }

        #endregion

        #region MAX

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Max(Type entityType, String propertyName)
        {
            return DatabaseSession.Max(entityType, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Max(Type entityType, String entityPropertyName, String propertyName)
        {
            return DatabaseSession.Max(entityType, entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Max(Type entityType, Filter filter, String propertyName)
        {
            return DatabaseSession.Max(entityType, filter, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Max(Type entityType, Filter filter, String entityPropertyName, String propertyName)
        {
            return DatabaseSession.Max(entityType, filter, entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Max<TEntity, TResult>(String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Max<TEntity, TResult>(propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Max<TEntity, TResult>(String entityPropertyName, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Max<TEntity, TResult>(entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="filter"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Max<TEntity, TResult>(Filter filter, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Max<TEntity, TResult>(filter, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="filter"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Max<TEntity, TResult>(Filter filter, String entityPropertyName, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Max<TEntity, TResult>(filter, entityPropertyName, propertyName);
        }

        #endregion

        #region MIN

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Min(Type entityType, String propertyName)
        {
            return DatabaseSession.Min(entityType, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Min(Type entityType, String entityPropertyName, String propertyName)
        {
            return DatabaseSession.Min(entityType, entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Min(Type entityType, Filter filter, String propertyName)
        {
            return DatabaseSession.Min(entityType, filter, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Min(Type entityType, Filter filter, String entityPropertyName, String propertyName)
        {
            return DatabaseSession.Min(entityType, filter, entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Min<TEntity, TResult>(String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Min<TEntity, TResult>(propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Min<TEntity, TResult>(String entityPropertyName, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Min<TEntity, TResult>(entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="filter"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Min<TEntity, TResult>(Filter filter, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Min<TEntity, TResult>(filter, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="filter"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Min<TEntity, TResult>(Filter filter, String entityPropertyName, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Min<TEntity, TResult>(filter, entityPropertyName, propertyName);
        }

        #endregion

        #region SUM

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Sum(Type entityType, String propertyName)
        {
            return DatabaseSession.Sum(entityType, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Sum(Type entityType, String entityPropertyName, String propertyName)
        {
            return DatabaseSession.Sum(entityType, entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Sum(Type entityType, Filter filter, String propertyName)
        {
            return DatabaseSession.Sum(entityType, filter, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual Object Sum(Type entityType, Filter filter, String entityPropertyName, String propertyName)
        {
            return DatabaseSession.Sum(entityType, filter, entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Sum<TEntity, TResult>(String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Sum<TEntity, TResult>(propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Sum<TEntity, TResult>(String entityPropertyName, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Sum<TEntity, TResult>(entityPropertyName, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="filter"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Sum<TEntity, TResult>(Filter filter, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Sum<TEntity, TResult>(filter, propertyName);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <typeparam name="TResult"></typeparam>
        /// <param name="filter"></param>
        /// <param name="entityPropertyName"></param>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public virtual TResult Sum<TEntity, TResult>(Filter filter, String entityPropertyName, String propertyName) where TEntity : class, new()
        {
            return DatabaseSession.Sum<TEntity, TResult>(filter, entityPropertyName, propertyName);
        }

        #endregion

        #endregion

        #region 复合实体

        #region Compose

        #region 非泛型

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType)
        {
            return DatabaseSession.Compose(compositeResultType);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, Filter whereFilter)
        {
            return DatabaseSession.Compose(compositeResultType, whereFilter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, Sorter sorter)
        {
            return DatabaseSession.Compose(compositeResultType, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, Filter whereFilter, Sorter sorter)
        {
            return DatabaseSession.Compose(compositeResultType, whereFilter, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeSettings settings)
        {
            return DatabaseSession.Compose(compositeResultType, settings);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeSettings settings, Filter whereFilter)
        {
            return DatabaseSession.Compose(compositeResultType, settings, whereFilter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeSettings settings, Sorter sorter)
        {
            return DatabaseSession.Compose(compositeResultType, settings, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeSettings settings, Filter whereFilter, Sorter sorter)
        {
            return DatabaseSession.Compose(compositeResultType, settings, whereFilter, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeBuilderStrategy loadStrategy)
        {
            return DatabaseSession.Compose(compositeResultType, loadStrategy);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeBuilderStrategy loadStrategy, Filter whereFilter)
        {
            return DatabaseSession.Compose(compositeResultType, loadStrategy, whereFilter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeBuilderStrategy loadStrategy, Sorter sorter)
        {
            return DatabaseSession.Compose(compositeResultType, loadStrategy, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeBuilderStrategy loadStrategy, Filter whereFilter, Sorter sorter)
        {
            return DatabaseSession.Compose(compositeResultType, loadStrategy, whereFilter, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeBuilderStrategy loadStrategy, CompositeSettings settings)
        {
            return DatabaseSession.Compose(compositeResultType, loadStrategy, settings);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Filter whereFilter)
        {
            return DatabaseSession.Compose(compositeResultType, loadStrategy, settings, whereFilter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Sorter sorter)
        {
            return DatabaseSession.Compose(compositeResultType, loadStrategy, settings, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Filter whereFilter, Sorter sorter)
        {
            return DatabaseSession.Compose(compositeResultType, loadStrategy, settings, whereFilter, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="startIndex">开始索引，基于零。</param>
        /// <param name="recordCount">要获取的记录数。</param>
        /// <returns>复合实体集合。</returns>
        public virtual CompositeResult[] Compose(Type compositeResultType, CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Filter whereFilter, Sorter sorter, Int32 startIndex, Int32 recordCount)
        {
            return DatabaseSession.Compose(compositeResultType, loadStrategy, settings, whereFilter, sorter, startIndex, recordCount);
        }

        #endregion

        #region 泛型

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>()
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>();
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(Filter whereFilter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(whereFilter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(Filter whereFilter, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(whereFilter, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeBuilderStrategy loadStrategy)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(loadStrategy);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeBuilderStrategy loadStrategy, Filter whereFilter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(loadStrategy, whereFilter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeBuilderStrategy loadStrategy, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(loadStrategy, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeBuilderStrategy loadStrategy, Filter whereFilter, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(loadStrategy, whereFilter, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeSettings settings)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(settings);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeSettings settings, Filter whereFilter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(settings, whereFilter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeSettings settings, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(settings, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeSettings settings, Filter whereFilter, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(settings, whereFilter, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeBuilderStrategy loadStrategy, CompositeSettings settings)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(loadStrategy, settings);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Filter whereFilter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(loadStrategy, settings, whereFilter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(loadStrategy, settings, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Filter whereFilter, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(loadStrategy, settings, whereFilter, sorter);
        }

        /// <summary>
        /// 加载复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <param name="startIndex">开始索引，基于零。</param>
        /// <param name="recordCount">要获取的记录数。</param>
        /// <returns>复合实体集合。</returns>
        public virtual TCompositeResult[] Compose<TCompositeResult>(CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Filter whereFilter, Sorter sorter, Int32 startIndex, Int32 recordCount)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.Compose<TCompositeResult>(loadStrategy, settings, whereFilter, sorter, startIndex, recordCount);
        }

        #endregion

        #endregion

        #region ComposeOne

        #region 非泛型

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType)
        {
            return DatabaseSession.ComposeOne(compositeResultType);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, Filter whereFilter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, whereFilter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, Sorter sorter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, Filter whereFilter, Sorter sorter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, whereFilter, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeBuilderStrategy loadStrategy)
        {
            return DatabaseSession.ComposeOne(compositeResultType, loadStrategy);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeBuilderStrategy loadStrategy, Filter whereFilter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, loadStrategy, whereFilter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeBuilderStrategy loadStrategy, Sorter sorter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, loadStrategy, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeBuilderStrategy loadStrategy, Filter whereFilter, Sorter sorter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, loadStrategy, whereFilter, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeSettings settings)
        {
            return DatabaseSession.ComposeOne(compositeResultType, settings);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeSettings settings, Filter whereFilter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, settings, whereFilter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeSettings settings, Sorter sorter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, settings, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeSettings settings, Filter whereFilter, Sorter sorter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, settings, whereFilter, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeBuilderStrategy loadStrategy, CompositeSettings settings)
        {
            return DatabaseSession.ComposeOne(compositeResultType, loadStrategy, settings);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Filter whereFilter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, loadStrategy, settings, whereFilter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Sorter sorter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, loadStrategy, settings, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <param name="compositeResultType">复合实体类型。</param>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual CompositeResult ComposeOne(Type compositeResultType, CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Filter whereFilter, Sorter sorter)
        {
            return DatabaseSession.ComposeOne(compositeResultType, loadStrategy, settings, whereFilter, sorter);
        }

        #endregion

        #region 泛型

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>()
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>();
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeBuilderStrategy loadStrategy)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(loadStrategy);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeBuilderStrategy loadStrategy, Filter whereFilter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(loadStrategy, whereFilter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeBuilderStrategy loadStrategy, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(loadStrategy, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeBuilderStrategy loadStrategy, Filter whereFilter, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(loadStrategy, whereFilter, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeSettings settings)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(settings);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeSettings settings, Filter whereFilter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(settings, whereFilter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeSettings settings, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(settings, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeSettings settings, Filter whereFilter, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(settings, whereFilter, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeBuilderStrategy loadStrategy, CompositeSettings settings)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(loadStrategy, settings);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Filter whereFilter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(loadStrategy, settings, whereFilter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(loadStrategy, settings, sorter);
        }

        /// <summary>
        /// 加载一个复合实体。
        /// </summary>
        /// <typeparam name="TCompositeResult">复合实体类型。</typeparam>
        /// <param name="loadStrategy">加载策略。</param>
        /// <param name="settings">复合实体过滤器列表。</param>
        /// <param name="whereFilter">WHERE 过滤器。</param>
        /// <param name="sorter">排序器。</param>
        /// <returns>复合实体。</returns>
        public virtual TCompositeResult ComposeOne<TCompositeResult>(CompositeBuilderStrategy loadStrategy, CompositeSettings settings, Filter whereFilter, Sorter sorter)
            where TCompositeResult : CompositeResult, new()
        {
            return DatabaseSession.ComposeOne<TCompositeResult>(loadStrategy, settings, whereFilter, sorter);
        }

        #endregion

        #endregion

        #endregion

        #endregion

        #region 存在性判断

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="filter"></param>
        /// <returns></returns>
        public virtual Boolean Exists(Type entityType, Filter filter)
        {
            return DatabaseSession.Exists(entityType, filter);
        }

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="filter"></param>
        /// <returns></returns>
        public virtual Boolean Exists<TEntity>(Filter filter) where TEntity : class, new()
        {
            return DatabaseSession.Exists<TEntity>(filter);
        }

        #endregion

        #region 其他服务

        /// <summary>
        /// 请参看 <see cref="IDatabaseSession"/> 对此方法的注释。
        /// </summary>
        /// <returns></returns>
        public virtual DateTime Now()
        {
            return DatabaseSession.Now();
        }

        #endregion

        #region 直接访问数据库


        /// <summary>
        /// 创建数据库连接。
        /// </summary>
        /// <returns>创建好的数据库连接。</returns>
        public DbConnection CreateConnection()
        {
            return DatabaseSession.CreateConnection();
        }

        /// <summary>
        /// 创建 Database 实例。
        /// </summary>
        /// <returns>创建好的 Database 实例。</returns>
        public Database CreateDatabase()
        {
            return DatabaseSession.CreateDatabase();
        }

        #endregion

        #endregion

        #region 辅助方法

        /// <summary>
        /// 停止数据库会话。
        /// </summary>
        /// <param name="entity">实体。</param>
        protected static void DetachDatabaseSession(Object entity)
        {
            EtyBusinessObject bo = entity as EtyBusinessObject;

            if (bo != null)
            {
                bo.DatabaseSession = null;
            }
        }

        /// <summary>
        /// 停止数据库会话。
        /// </summary>
        /// <param name="entities">实体集合。</param>
        protected static void DetachDatabaseSession(IList<Object> entities)
        {
            if (entities == null)
            {
                return;
            }

            foreach (Object e in entities)
            {
                DetachDatabaseSession(e);
            }
        }

        /// <summary>
        /// 停止数据库会话，只操作 RequireDelete 为 True 的那些实体。
        /// </summary>
        /// <param name="entities">实体集合。</param>
        protected static void DetachDatabaseSession(IList<IDbEntity> entities)
        {
            if (entities == null)
            {
                return;
            }

            foreach (IDbEntity e in entities)
            {
                if (e.RequireDelete)
                {
                    DetachDatabaseSession(e);
                }
            }
        }

        #endregion
    }
}